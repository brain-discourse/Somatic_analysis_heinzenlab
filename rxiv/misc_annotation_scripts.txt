#######################################Add column containing file name to every file in each row  ###########################################################################
#!/bin/bash
	
	#SBATCH -N 1
	#SBATCH -n 6
	#SBATCH -p general
	#SBATCH --nice=30 
	#SBATCH -t 07-00:00:00
	#SBATCH --mem=40g


for i in *.txt; do awk '{print FILENAME"\t"$0}' $i > $i.bk; mv $i.bk $i; done


###########################################Remove first line of every file (because of differences in headers)##############################################################

sed -i '1d' *.txt


#########################################################################Merge files##########################################################################################
#if you have files w same headers and want to merge minus headers
#!/bin/bash
	#SBATCH -N 1
	#SBATCH -n 6
	#SBATCH -p general
	#SBATCH --nice=30 
	#SBATCH -t 07-00:00:00
	#SBATCH --mem=80g
awk '
    FNR==1 && NR!=1{next;}{print}
' *.txt.6.5 >all.txt000 

#if you have files w no headers and want to merge 
cat *.txt > all.txt


###check wc of individual file and merged file
find . -name '*output.txt' | xargs wc -l

#########################################Add header of merged file/file that has all desired cols incl sample name to this MERGED file########################################

sed -i "1s/^/$(head -n1 file_with_headers)\n/" file_you_want_to_edit

#############################################Alignment checks- all cols tab separated#########################################################################
#perl script
#usage: perl Formatstan.pl input output 

#!/usr/local/bin/perl -w
# Bookmarks: 0,0 0,0 0,0 8,40
$input_file=$ARGV[0];
$output_file=$ARGV[1];
chomp ($input_file);
open (input_data, "<$input_file") or die "Couldn't open: $!";
chomp ($output_file);
open (output_result, ">$output_file") or die "Couldn't open: $!";

$line='';
$i=0;
$temp='';
$linestan='';
while (1) {
    $i++;
    chomp ($line=<input_data>);
    $linestan='';
    while ($line=~/".*?"/) {
        $linestan.=$`;
        $temp=$&;
        $line=$';
        $temp=~s/\t/ /g;
        $linestan.=$temp;
    }
    $linestan.=$line;
    print output_result "$linestan\n";
    if (0==($i%1000000)) {
        print ("$i lines processed\n");
    }
    if (eof) {
        last;
    }
}
close input_data;
close output_result;
if (0!=($i%1000000)) {
    print ("$i lines processed\n");
}
print ("All done\n");

exit;


#double check this by printing columns 

awk -F '\t' '{print $2}' mcdbose173br_filtered.vcf.bed

#########################################################to merge new files to a final merged file#############################################################


#########################################################filtering##################################################################################

#filter pass and CCDS
#!/bin/bash 
#SBATCH -t 07-00:00:00
#SBATCH --mem=20g
awk -F "\t" 'NR==1; NR > 1 { if(($343 == "PASS") && ($373 == "bed")) { print } }' new_samples.txt  > new_samples_merged.txt

#filter genes

##!/bin/bash
#SBATCH -N 1
#SBATCH -n 6
#SBATCH -p general
#SBATCH --nice=30 
#SBATCH -t 07-00:00:00
#SBATCH --mem=800
awk -F "\t" 'NR==1; NR > 1 { if(($3 == "AKT3") ) { print } }' final_merged_file.txt > AKT3.txt


######################################rename columns for paired sample merging##############################################################

 library(readr)
library(dplyr)
library(tidyverse)


#data_path <- "/proj/heinzenlab/users/meethila1/brain_only/brain_only_annotated/merged_tables/"
samples=c("dukeepi3208","dukeepi3066","dukeepi2944","dukeepi3164","dukeepi3208","dukeepi3925","dukeepi5203","erka16","mcdgg14028","mcdgg15020","mcdgg15022","mcdgg16011","uth0001","uth0002","uth0005")
for (f in samples) {
my_csv=paste("/proj/heinzenlab/users/meethila1/brain_blood/brain_blood_annotated/merged_tables/scripts/",f,"_paired.txt", sep="")
Outfile=paste("/proj/heinzenlab/users/meethila1/brain_blood/brain_blood_annotated/merged_tables/scripts/", f, "_edited.txt", sep="")
file_read <- read_tsv(my_csv)
edited_csv<-file_read[ ,c(1:362,373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 383:391)]
write_tsv(edited_csv, Outfile)
}
q()

######################################edit csv to get Erin's formatted cols (brain_only)##############################################################

library(readr)
library(dplyr)
library(tidyverse)


#data_path <- "/proj/heinzenlab/users/meethila1/brain_only/brain_only_annotated/merged_tables/"
samples=c("AKT3","BRAF", "DEPDC5", "NIPBL", "PIK3CA", "RANBP2", "SLC35A2", "STXBP1", "TSC2", "ARID1A", "CASK", "CUL1" , "KRAS", "MTOR", "PLNXB1","SCN1A", "SOS2", "TSC1", "YWHAH")
for (f in samples) {
my_csv=paste("/proj/heinzenlab/users/meethila1/brain_only/brain_only_annotated/merged_tables/",f,".txt", sep="")
Outfile=paste("/proj/heinzenlab/users/meethila1/brain_only/brain_only_annotated/merged_tables/", f, "_edited.txt", sep="")
file_read <- read_tsv(my_csv)
edited_csv<-file_read%>%
select("sample_name","ID","Gene.refGene","Chr","Start","End","Ref","Alt","Func.refGene","GeneDetail.refGene","ExonicFunc.refGene","AAChange.refGene","cytoBand","gnomad_exome_AF","gnomad_exome_non_topmed_AF_popmax","gnomad_exome_non_neuro_AF_popmax","gnomad_exome_non_cancer_AF_popmax","gnomad_exome_controls_AF_popmax","gnomad_genome_AF","gnomad_genome_AF_popmax","gnomad_genome_non_topmed_AF_popmax","gnomad_genome_non_neuro_AF_popmax","gnomad_genome_non_cancer_AF_popmax","gnomad_genome_controls_AF_popmax","gene4denovo_DN_ID","ExAC_ALL","InterVar_automated","dbscSNV_ADA_SCORE","dbscSNV_RF_SCORE","avsnp150","Kaviar_AF","Kaviar_AC","Kaviar_AN","SIFT4G_pred","Polyphen2_HDIV_pred","Polyphen2_HVAR_pred","MutationAssessor_pred","VEST4_score","REVEL_score","CADD_phred","Interpro_domain","GTEx_V8_gene","GTEx_V8_tissue","SIFT_score","regsnp_fpr","regsnp_disease","regsnp_splicing_site","CLNALLELEID","CLNDN","CLNDISDB","CLNREVSTAT","CLNSIG","Kaplanis_consequence","cosmic92_coding","cosmic92_noncoding","Otherinfo10","Otherinfo11","Otherinfo12","Otherinfo13","LoFtool_percentile","gene mim","disease name","disease mim","DDD category","allelic requirement","mutation consequence","phenotypes","organ specificity list","pmids","panel","prev symbols","hgnc id","gene disease pair entry date","transcript","pLI","oe_lof","mis_z","CHROM","POS","REF","ALT","QUAL","FILTER","AS_FilterStatus","ECNT","DP","AS_SB_TABLE","GERMQ","MBQ","MFRL","MMQ","MPOS","NALOD","NLOD","PON","POPAF","ROQ","RPA","RU","STR","STRQ","TLOD","vcf_GT","vcf_AD","vcf_AF","vcf_DP","vcf_F1R2","vcf_F2R1","vcf_PGT","vcf_PID","vcf_PS","vcf_SB","Bed_Name")%>%
rename(variant_ID="ID")
write_tsv(edited_csv, Outfile)
}
q()

#####################edit csv to get Erin's formatted cols (brain_blood)####################################################################
#############Slurm script: ###########
module load r/4.0.1
R CMD BATCH --no-restore --no-save Rscript1.r
###############R scirpt###########

library(readr)
library(dplyr)
library(tidyverse)


#data_path <- "/proj/heinzenlab/users/meethila1/brain_blood/brain_blood_annotated/merged_tables/"
samples=c("new_passed_from_parsed_using_awk")
for (f in samples) {
my_csv=paste("/proj/heinzenlab/users/meethila1/brain_blood/brain_blood_annotated/merged_tables/",f,".txt", sep="")
Outfile=paste("/proj/heinzenlab/users/meethila1/brain_blood/brain_blood_annotated/merged_tables/", f, "_edited.txt", sep="")
file_read <- read_tsv(my_csv)
edited_csv<-file_read%>%
select("Sample_Name","ID","Gene.refGene","Chr","Start","End","Ref","Alt","Func.refGene","GeneDetail.refGene","ExonicFunc.refGene","AAChange.refGene","cytoBand","gnomad_exome_AF","gnomad_exome_non_topmed_AF_popmax","gnomad_exome_non_neuro_AF_popmax","gnomad_exome_non_cancer_AF_popmax","gnomad_exome_controls_AF_popmax","gnomad_genome_AF","gnomad_genome_AF_popmax","gnomad_genome_non_topmed_AF_popmax","gnomad_genome_non_neuro_AF_popmax","gnomad_genome_non_cancer_AF_popmax","gnomad_genome_controls_AF_popmax","gene4denovo_DN_ID","ExAC_ALL","InterVar_automated","dbscSNV_ADA_SCORE","dbscSNV_RF_SCORE","avsnp150","Kaviar_AF","Kaviar_AC","Kaviar_AN","SIFT4G_pred","Polyphen2_HDIV_pred","Polyphen2_HVAR_pred","MutationAssessor_pred","VEST4_score","REVEL_score","CADD_phred","Interpro_domain","GTEx_V8_gene","GTEx_V8_tissue","SIFT_score","regsnp_fpr","regsnp_disease","regsnp_splicing_site","CLNALLELEID","CLNDN","CLNDISDB","CLNREVSTAT","CLNSIG","Kaplanis_consequence","cosmic92_coding","cosmic92_noncoding","Otherinfo10","Otherinfo11","Otherinfo12","Otherinfo13","LoFtool_percentile","gene_mim","disease_name","disease_mim","DDD_category","allelic_requirement","mutation_consequence","phenotypes","organ_specificicty_list","PMIDS","Panel","Prev_symbols","hgnc_id","gene_disease_pair_entry_date","transcript","pLI","oe_lof","mis_z","CHROM","POS","REF","ALT","QUAL","FILTER","AS_FilterStatus","ECNT","DP","AS_SB_TABLE","GERMQ","MBQ","MFRL","MMQ","MPOS","NALOD","NLOD","PON","POPAF","ROQ","RPA","RU","STR","STRQ","TLOD","vcf_br.GT","vcf_br.AD","vcf_br.AF","vcf_br.DP","vcf_br.F1R2","vcf_br.F2R1","vcf_br.PGT","vcf_br.PID","vcf_br.PS","vcf_br.SB","vcf_bl.GT","vcf_bl.AD","vcf_bl.AF","vcf_bl.DP","vcf_bl.F1R2","vcf_bl.F2R1","vcf_bl.PGT","vcf_bl.PID","vcf_bl.PS","vcf_bl.SB","Bed_Name")%>%
rename(variant_ID="ID")
write_tsv(edited_csv, Outfile)
}
q()


#########################################Rename all files

#!/bin/bash


for i in *_final_output.txt; 
do n="${i%_final_output.txt}" 
mv $i $n.txt
done
