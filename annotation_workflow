
##################################################################Annotation workflow run with shell wrapper###################################################################################
#wrapper script
#!/bin/bash

for filename in /proj/heinzenlab/users/meethila1/brain_only/new_samples/*_filtered.vcf

do 

sbatch --time=100:00:00 --mem=40g --job-name NGS --wrap="sh /proj/heinzenlab/users/meethila1/brain_only/new_samples/loop_testing.sh $filename"
sleep 1
done
#####################################################################################################################

#!/bin/bash
	
#for filename in /proj/heinzenlab/users/meethila1/script_testing/*_filtered.vcf
#generate UID (easy merging)
#do
filename=$1
module load samtools/1.9 
bcftools annotate --set-id +'%CHROM:%POS:%REF:%FIRST_ALT' "$filename" > $(basename "$filename" .ext).UID \ 
 echo "****UID generated****" \
 
#VCF to table 
module load gatk/4.1.7.0 
gatk VariantsToTable \
-V $(basename  "$filename" .ext).UID \
-F CHROM \
-F POS \
-F ID \
-F REF \
-F ALT \
-F QUAL \
-F FILTER \
-F AS_FilterStatus \
-F ECNT \
-F DP \
-F AS_SB_TABLE \
-F GERMQ \
-F MBQ \
-F MFRL \
-F MMQ \
-F MPOS \
-F NALOD \
-F NLOD \
-F PON \
-F POPAF \
-F ROQ \
-F RPA \
-F RU \
-F STR \
-F STRQ \
-F TLOD \
-GF GT \
-GF AD \
-GF AF \
-GF DP \
-GF F1R2 \
-GF F2R1 \
-GF PGT \
-GF PID \
-GF PS \
-GF SB \
--show-filtered \
-O $(basename "$filename" .ext).table \
    
    echo "****VariantsToTable complete****" \ 
 #annovar input file 
module load annovar/20200609  
convert2annovar.pl -format vcf4 $(basename "$filename" .ext).UID -outfile $(basename "$filename" .ext).avinput \
-allsample \
-includeinfo \
-withfreq \

	echo "****annotation table ready for region based annotation****" \


module load annovar/20200609
annotate_variation.pl $(basename "$filename" .ext).avinput /proj/heinzenlab/users/meethila1/humandb/ \
-bedfile hg38_CCDShg18exons+2bp.CCDSv22.bed \
-dbtype bed \
-regionanno \
-colsWanted 4 \
-out $(basename "$filename" .ext).bed \

    echo "****Region based annotation  complete****" \

       ##Select columns of interest

                awk '{print $1,$2,$3,$4,$5,$6,$7,$8,$10,$13}' $(basename "$filename" .ext).bed.hg18_bed > $(basename "$filename" .ext).bed \

                ##Convert to tsv

		tr ' ' '\t' < $(basename "$filename" .ext).bed > $(basename "$filename" .ext).bed.temp && mv $(basename "$filename" .ext).bed.temp $(basename "$filename" .ext).bed \

                ##Add headers to bed file

                sed -i '1i Bed_0	Bed_Name	Bed_Chr	Bed_Start	Bed_End	Bed_Ref	Bed_Alt	Bed_1	Bed_2	ID' $(basename "$filename" .ext).bed \


                echo "****bed file ready****" \


#merging databases (vcf table and bed file)


#annotation tables
module load annovar/20200609 
table_annovar.pl $(basename  "$filename" .ext).UID /proj/heinzenlab/users/meethila1/humandb/ \
-buildver hg38 \
-out $(basename "$filename" .ext).annotated \
-remove \
-protocol refGene,cytoBand,gnomad211_exome,gnomad211_genome,gene4denovo201907,exac03,intervar_20180118,dbscsnv11,avsnp150,kaviar_20150923,dbnsfp41a,dbnsfp30a,revel,ljb26_all,regsnpintron,clinvar_20200316,kaplanis_v1,VKGL,cosmic92_coding,cosmic92_noncoding \
-operation g,r,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f \
-nastring . \
-vcfinput \

	echo "****Annotation complete****" 

done


#######################################################bed file needs editting#############################################################################################

for filename in /proj/heinzenlab/users/meethila1/controls/*_filtered.vcf
do 
#prints only select cols from raw bed file 
awk '{print $1,$2,$3,$4,$5,$6,$7,$8,$10,$13}' $(basename "$filename" .ext).bed.hg18_bed > $(basename "$filename" .ext).bed \
#trasnforms the bed file to a tsv file
tr ' ' '\t' < $(basename "$filename" .ext).bed > $(basename "$filename" .ext).bed.temp && mv $(basename "$filename" .ext).bed.temp $(basename "$filename" .ext).bed \
#adds header to the bed file 
sed -i '1i Bed_0	Bed_Name	Bed_Chr	Bed_Start	Bed_End	Bed_Ref	Bed_Alt	Bed_1	Bed_2ID' $(basename "$filename" .ext).bed

done

###############################################R script run using slurm############################################################################################################
#shell for running R
#!/bin/bash
	#SBATCH -N 1
	#SBATCH -n 6
	#SBATCH -p general
	#SBATCH --nice=30 
	#SBATCH -t 07-00:00:00
#SBATCH --mem=40g
module load r/4.0.1
R CMD BATCH --no-restore --no-save Rscript.r


##################################################R script for merging all annotation outputs/sample###########################################

#! /usr/bin/env Rscript
library(readr)
library(dplyr)
library(tidyr)
library(fs)
library(stringr)
data_path <- "/proj/heinzenlab/users/meethila1/controls/"
samples=c("1465_1024-pfc-bulk","4643_1024-pfc-bulk","UMB1024-pfc-1b12","UMB1474-pfc-1b123","UMB1499-pfc-1b1","UMB1712-pfc-1b12","UMB4548-pfc-1b1","UMB5161-pfc-1b1","UMB5238-pfc-1b123","UMB5391-pfc-1b12","UMB818-pfc-1b1","UMB914-pfc-1b12")
for (f in samples) {
Infile_table = paste("/proj/heinzenlab/users/meethila1/controls/",f,"_filtered.vcf.table", sep="")
Infile_bed = paste("/proj/heinzenlab/users/meethila1/controls/", f, "_filtered.vcf.bed", sep="")
Infile_annotated = paste("/proj/heinzenlab/users/meethila1/controls/", f, "_filtered.vcf.annotated.hg38_multianno.txt", sep="")
Outfile=paste("/proj/heinzenlab/users/meethila1/controls/", f, "_final_output.txt", sep="")
Macro1 <- read_tsv(Infile_table)
Macro2 <- read_tsv(Infile_bed)
Macro3 <- read_tsv(Infile_annotated)
vcf_bed_merged<- merge(Macro1, Macro2, by= 'ID', all.x=TRUE)
hg38_DDG2P_15_11_2020 <- read_tsv("/proj/heinzenlab/users/meethila1/humandb/hg38_DDG2P_15_11_2020.txt")
hg38_gnomad_lof_metrics <- read_tsv("/proj/heinzenlab/users/meethila1/humandb/hg38_gnomad_lof_metrics.txt")
hg38_LoFtool_scores <- read_tsv("/proj/heinzenlab/users/meethila1/humandb/hg38_LoFtool_scores.txt")
annnoout1<-merge(Macro3, hg38_LoFtool_scores, by= 'Gene.refGene', all.x = TRUE)
annnoout2<-merge(annnoout1, hg38_DDG2P_15_11_2020, by= 'Gene.refGene', all.x = TRUE)
annnoout3<-merge(annnoout2, hg38_gnomad_lof_metrics, by= 'Gene.refGene', all.x = TRUE)
head(annnoout3)
annnoout3<-annnoout3%>% rename('ID'=`Otherinfo6`)
final_out<-merge(annnoout3,vcf_bed_merged, by= 'ID', all.x = TRUE)
head(final_out)
write_tsv(final_out, Outfile)
}
q()

#######################################Rename all files #####################################################################################
#not run in slurm
#!/bin/bash


for i in *_final_output.txt; 
do n="${i%_final_output.txt}" 
mv $i $n.txt
done

########################################in case of paired, columns need to be rearranged for some samples (br ,bl)####################################################
#############Slurm script: 
module load r/4.0.1
R CMD BATCH --no-restore --no-save Rscript1.r

##############r script
library(readr)
library(dplyr)
library(tidyverse)


#data_path <- "/proj/heinzenlab/users/meethila1/brain_only/brain_only_annotated/merged_tables/"
samples=c("dukeepi3208","dukeepi3066","dukeepi2944","dukeepi3164","dukeepi3208","dukeepi3925","dukeepi5203","erka16","mcdgg14028","mcdgg15020","mcdgg15022","mcdgg16011","uth0001","uth0002","uth0005")
for (f in samples) {
my_csv=paste("/proj/heinzenlab/users/meethila1/brain_blood/brain_blood_annotated/merged_tables/scripts/",f,"_paired.txt", sep="")
Outfile=paste("/proj/heinzenlab/users/meethila1/brain_blood/brain_blood_annotated/merged_tables/scripts/", f, "_edited.txt", sep="")
file_read <- read_tsv(my_csv)
edited_csv<-file_read[ ,c(1:362,373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 383:391)]
write_tsv(edited_csv, Outfile)
}
q()
#######################################Add column containing file name to every file in each row  ###########################################################################
#!/bin/bash
	
	#SBATCH -N 1
	#SBATCH -n 6
	#SBATCH -p general
	#SBATCH --nice=30 
	#SBATCH -t 07-00:00:00
	#SBATCH --mem=40g


for i in *.txt; do awk '{print FILENAME"\t"$0}' $i > $i.bk; mv $i.bk $i; done


###########################################Remove first line of every file (because of differences in headers)##############################################################

sed -i '1d' *.txt


#########################################################################Merge files##########################################################################################
#if you have files w same headers and want to merge minus headers
#!/bin/bash
	#SBATCH -N 1
	#SBATCH -n 6
	#SBATCH -p general
	#SBATCH --nice=30 
	#SBATCH -t 07-00:00:00
	#SBATCH --mem=80g
awk '
    FNR==1 && NR!=1{next;}{print}
' *.txt.6.5 >all.txt000 

#if you have files w no headers and want to merge 
cat *.txt > all.txt


###check wc of individual file and merged file
find . -name '*output.txt' | xargs wc -l

#########################################Add header of merged file/file that has all desired cols incl sample name to this MERGED file########################################

sed -i "1s/^/$(head -n1 file_with_headers)\n/" while_you_wanna_edit

#############################################Alignment checks- all cols tab separated#########################################################################
#perl script
#usage: perl Formatstan.pl input output 

#!/usr/local/bin/perl -w
# Bookmarks: 0,0 0,0 0,0 8,40
$input_file=$ARGV[0];
$output_file=$ARGV[1];
chomp ($input_file);
open (input_data, "<$input_file") or die "Couldn't open: $!";
chomp ($output_file);
open (output_result, ">$output_file") or die "Couldn't open: $!";

$line='';
$i=0;
$temp='';
$linestan='';
while (1) {
    $i++;
    chomp ($line=<input_data>);
    $linestan='';
    while ($line=~/".*?"/) {
        $linestan.=$`;
        $temp=$&;
        $line=$';
        $temp=~s/\t/ /g;
        $linestan.=$temp;
    }
    $linestan.=$line;
    print output_result "$linestan\n";
    if (0==($i%1000000)) {
        print ("$i lines processed\n");
    }
    if (eof) {
        last;
    }
}
close input_data;
close output_result;
if (0!=($i%1000000)) {
    print ("$i lines processed\n");
}
print ("All done\n");

exit;


#double check this by printing columns 

awk -F '\t' '{print $2}' mcdbose173br_filtered.vcf.bed

#########################################################to merge new files to a big fat merged file#############################################################


#########################################################filtering##################################################################################

#filter pass and CCDS
#!/bin/bash 
#SBATCH -t 07-00:00:00
#SBATCH --mem=20g
awk -F "\t" 'NR==1; NR > 1 { if(($343 == "PASS") && ($373 == "bed")) { print } }' new_samples.txt  > new_samples_merged.txt

#filter genes

##!/bin/bash
#SBATCH -N 1
#SBATCH -n 6
#SBATCH -p general
#SBATCH --nice=30 
#SBATCH -t 07-00:00:00
#SBATCH --mem=800
awk -F "\t" 'NR==1; NR > 1 { if(($3 == "AKT3") ) { print } }' final_merged_file.txt > AKT3.txt

######################################edit csv to get Erin's formatted cols (brain_only)##############################################################

library(readr)
library(dplyr)
library(tidyverse)


#data_path <- "/proj/heinzenlab/users/meethila1/brain_only/brain_only_annotated/merged_tables/"
samples=c("AKT3","BRAF", "DEPDC5", "NIPBL", "PIK3CA", "RANBP2", "SLC35A2", "STXBP1", "TSC2", "ARID1A", "CASK", "CUL1" , "KRAS", "MTOR", "PLNXB1","SCN1A", "SOS2", "TSC1", "YWHAH")
for (f in samples) {
my_csv=paste("/proj/heinzenlab/users/meethila1/brain_only/brain_only_annotated/merged_tables/",f,".txt", sep="")
Outfile=paste("/proj/heinzenlab/users/meethila1/brain_only/brain_only_annotated/merged_tables/", f, "_edited.txt", sep="")
file_read <- read_tsv(my_csv)
edited_csv<-file_read%>%
select("sample_name","ID","Gene.refGene","Chr","Start","End","Ref","Alt","Func.refGene","GeneDetail.refGene","ExonicFunc.refGene","AAChange.refGene","cytoBand","gnomad_exome_AF","gnomad_exome_non_topmed_AF_popmax","gnomad_exome_non_neuro_AF_popmax","gnomad_exome_non_cancer_AF_popmax","gnomad_exome_controls_AF_popmax","gnomad_genome_AF","gnomad_genome_AF_popmax","gnomad_genome_non_topmed_AF_popmax","gnomad_genome_non_neuro_AF_popmax","gnomad_genome_non_cancer_AF_popmax","gnomad_genome_controls_AF_popmax","gene4denovo_DN_ID","ExAC_ALL","InterVar_automated","dbscSNV_ADA_SCORE","dbscSNV_RF_SCORE","avsnp150","Kaviar_AF","Kaviar_AC","Kaviar_AN","SIFT4G_pred","Polyphen2_HDIV_pred","Polyphen2_HVAR_pred","MutationAssessor_pred","VEST4_score","REVEL_score","CADD_phred","Interpro_domain","GTEx_V8_gene","GTEx_V8_tissue","SIFT_score","regsnp_fpr","regsnp_disease","regsnp_splicing_site","CLNALLELEID","CLNDN","CLNDISDB","CLNREVSTAT","CLNSIG","Kaplanis_consequence","cosmic92_coding","cosmic92_noncoding","Otherinfo10","Otherinfo11","Otherinfo12","Otherinfo13","LoFtool_percentile","gene mim","disease name","disease mim","DDD category","allelic requirement","mutation consequence","phenotypes","organ specificity list","pmids","panel","prev symbols","hgnc id","gene disease pair entry date","transcript","pLI","oe_lof","mis_z","CHROM","POS","REF","ALT","QUAL","FILTER","AS_FilterStatus","ECNT","DP","AS_SB_TABLE","GERMQ","MBQ","MFRL","MMQ","MPOS","NALOD","NLOD","PON","POPAF","ROQ","RPA","RU","STR","STRQ","TLOD","vcf_GT","vcf_AD","vcf_AF","vcf_DP","vcf_F1R2","vcf_F2R1","vcf_PGT","vcf_PID","vcf_PS","vcf_SB","Bed_Name")%>%
rename(variant_ID="ID")
write_tsv(edited_csv, Outfile)
}
q()

#####################edit csv to get Erin's formatted cols (brain_blood)####################################################################
#############Slurm script: ###########
module load r/4.0.1
R CMD BATCH --no-restore --no-save Rscript1.r
###############R scirpt###########

library(readr)
library(dplyr)
library(tidyverse)


#data_path <- "/proj/heinzenlab/users/meethila1/brain_blood/brain_blood_annotated/merged_tables/"
samples=c("new_passed_from_parsed_using_awk")
for (f in samples) {
my_csv=paste("/proj/heinzenlab/users/meethila1/brain_blood/brain_blood_annotated/merged_tables/",f,".txt", sep="")
Outfile=paste("/proj/heinzenlab/users/meethila1/brain_blood/brain_blood_annotated/merged_tables/", f, "_edited.txt", sep="")
file_read <- read_tsv(my_csv)
edited_csv<-file_read%>%
select("Sample_Name","ID","Gene.refGene","Chr","Start","End","Ref","Alt","Func.refGene","GeneDetail.refGene","ExonicFunc.refGene","AAChange.refGene","cytoBand","gnomad_exome_AF","gnomad_exome_non_topmed_AF_popmax","gnomad_exome_non_neuro_AF_popmax","gnomad_exome_non_cancer_AF_popmax","gnomad_exome_controls_AF_popmax","gnomad_genome_AF","gnomad_genome_AF_popmax","gnomad_genome_non_topmed_AF_popmax","gnomad_genome_non_neuro_AF_popmax","gnomad_genome_non_cancer_AF_popmax","gnomad_genome_controls_AF_popmax","gene4denovo_DN_ID","ExAC_ALL","InterVar_automated","dbscSNV_ADA_SCORE","dbscSNV_RF_SCORE","avsnp150","Kaviar_AF","Kaviar_AC","Kaviar_AN","SIFT4G_pred","Polyphen2_HDIV_pred","Polyphen2_HVAR_pred","MutationAssessor_pred","VEST4_score","REVEL_score","CADD_phred","Interpro_domain","GTEx_V8_gene","GTEx_V8_tissue","SIFT_score","regsnp_fpr","regsnp_disease","regsnp_splicing_site","CLNALLELEID","CLNDN","CLNDISDB","CLNREVSTAT","CLNSIG","Kaplanis_consequence","cosmic92_coding","cosmic92_noncoding","Otherinfo10","Otherinfo11","Otherinfo12","Otherinfo13","LoFtool_percentile","gene_mim","disease_name","disease_mim","DDD_category","allelic_requirement","mutation_consequence","phenotypes","organ_specificicty_list","PMIDS","Panel","Prev_symbols","hgnc_id","gene_disease_pair_entry_date","transcript","pLI","oe_lof","mis_z","CHROM","POS","REF","ALT","QUAL","FILTER","AS_FilterStatus","ECNT","DP","AS_SB_TABLE","GERMQ","MBQ","MFRL","MMQ","MPOS","NALOD","NLOD","PON","POPAF","ROQ","RPA","RU","STR","STRQ","TLOD","vcf_br.GT","vcf_br.AD","vcf_br.AF","vcf_br.DP","vcf_br.F1R2","vcf_br.F2R1","vcf_br.PGT","vcf_br.PID","vcf_br.PS","vcf_br.SB","vcf_bl.GT","vcf_bl.AD","vcf_bl.AF","vcf_bl.DP","vcf_bl.F1R2","vcf_bl.F2R1","vcf_bl.PGT","vcf_bl.PID","vcf_bl.PS","vcf_bl.SB","Bed_Name")%>%
rename(variant_ID="ID")
write_tsv(edited_csv, Outfile)
}
q()


